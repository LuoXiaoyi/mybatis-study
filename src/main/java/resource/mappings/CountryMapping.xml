<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lxy.study.mybatis.domain.daos.CountryMapper">
  <!--
  缓存分为一级缓存和二级缓存
  一级缓存：范围是同一个SqlSession对象中；对同一个sql执行多次时，如果缓存未超时，则直接从缓存获取数据，不会再次
  发送sql语句到数据库去；
  二级缓存：范围是同一个SqlSessionFactory对象中的所有SqlSession对象；对于同一个sql，如果缓存未超时，多次执行
  时会直接从二级缓存中获取数据

  开启二级缓存：1. 配置<cache/>标签 2. 将二级缓存对应的对象实现Serializable接口

  注意：如果使用二级缓存，则必须使用commit方法进行提交，另外的SqlSession对象才可能从二级缓存中获取到缓存数据
  -->
  <cache/>
  <resultMap id="countryMap" type="com.lxy.study.mybatis.domain.models.Country">
    <constructor>
      <arg column="code" javaType="string"/>
      <arg column="name" javaType="string"/>
    </constructor>
    <result column="continent" property="continent"
      javaType="com.lxy.study.mybatis.domain.models.Continent"
      typeHandler="com.lxy.study.mybatis.typehandlers.ContinentEnumHandler"/>
    <collection property="cities" column="code" select="com.lxy.study.mybatis.domain.daos.CityMapper.queryCitiesByCountryCode"/>
  </resultMap>

  <sql id="countryColumns">
    Code,Name,Continent,Region,SurfaceArea,IndepYear,Population,LifeExpectancy,GNP,GNPOld,
    LocalName,GovernmentForm,HeadOfState,Capital,Code2
  </sql>

  <select id="queryAllCountries" resultMap="countryMap">
    select
    <include refid="countryColumns"/>
    from country
  </select>

  <!-- 动态sql使用 这里测试的时候发现，如果传入的是字符串，则无法判空，
  不知道是我使用的问题呢，还是本身就是这样设计的 -->
  <select id="queryCountryByParas" parameterType="map" resultMap="countryMap">
    select
    <include refid="countryColumns"/>
    from country where 1=1
    <if test="code != null and code != ''" >
      and code = #{code}
    </if>
    <!-- 类似case when default -->
    <choose>
      <when test="name != null and name != ''">
        and name = #{name}
      </when>
      <when test="population != null and population != ''">
        and population > #{population}
      </when>
      <otherwise>
        and gnp > 100
      </otherwise>
    </choose>
  </select>

  <!-- 使用where/trim/set元素来实现where/set等功能
  默认情况下，回把set/where中多余的","/"and"去掉 -->
  <update id="updateCountryByParas" parameterType="map">
    update country
    <set>
      <if test="name != null and name != ''">
        name = #{name},
      </if>
      <if test="population != null and population != ''">
        population = #{population}
      </if>
    </set>
    <where>
      <if test="code != null and code != ''">
        and code = #{code}
      </if>
    </where>
  </update>
  
  <!-- foreach 使用，支持所有的Collection接口实现类，
   通过 bind 元素能够解决字符串的拼接问题，其实现原理是OGNL表达式-->
  <select id="queryCountryByCodes" resultMap="countryMap">
    <bind name="likeValue" value="'%' + like + '%'" />
    select <include refid="countryColumns"/>
    from country
    <where>
      <if test="codeList != null and !codeList.isEmpty()">
        and code in
        <foreach collection="codeList" open="(" separator="," close=")" item="code" index="index">
          #{code}
        </foreach>
      </if>

      <if test="likeValue != null and likeValue != ''">
        and name like #{likeValue}
      </if>
    </where>
<!--
    where code in 
    <foreach collection="codeList" open="(" separator="," close=")" item="code" index="index">
      #{code}
    </foreach>
    and name like #{likeValue}-->
    
  </select>

  <select id="queryCountryByCode" resultMap="countryMap">
    select
    <include refid="countryColumns"/>
    from country where code = #{code}
  </select>

  <select id="queryAllCountriesByPage" parameterType="java.util.Map" resultMap="countryMap">
    select <include refid="countryColumns"/> from country where Population > #{population}
  </select>
</mapper>